<scalastyle commentFilter="enabled">
    <name>Scalastyle standard configuration</name>

    <!-- TODO: These cause 3k+ lines involved  -leave disabled until we make progress on them -->
    <check level="warning" class="org.scalastyle.scalariform.RedundantIfChecker" enabled="true"></check>

    <check level="warning" class="org.scalastyle.scalariform.WhileChecker" enabled="false"></check>
    <check level="warning" class="org.scalastyle.scalariform.VarFieldChecker" enabled="false"></check>
    <check level="warning" class="org.scalastyle.scalariform.VarLocalChecker" enabled="false"></check>
    <check level="warning" class="org.scalastyle.scalariform.NullChecker" enabled="false"></check>

    <check level="warning" class="org.scalastyle.scalariform.IfBraceChecker" enabled="false">
        <parameters>
            <parameter name="singleLineAllowed"><![CDATA[false]]></parameter>
            <parameter name="doubleLineAllowed"><![CDATA[false]]></parameter>
        </parameters>
    </check>

    <!-- Doesn't seem super big deal here, and we have a lot of magic numbers ... -->
    <check level="warning" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="false">
        <parameters>
            <parameter name="ignore"><![CDATA[-1,0,1,2,3]]></parameter>
        </parameters>
    </check>

    <!-- TODO: Gradually reduce the maximum and fix related code until the maximum=20 -->
    <check level="warning" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
        <parameters>
            <parameter name="maximum"><![CDATA[50]]></parameter>
        </parameters>
    </check>

    <!-- lifted/modified from Apache Spark scalastyle
    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
        </parameters>
    </check>
    -->

    <!-- lifted/modified from Apache Spark scalastyle
    <check level="error" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="true"></check>
    -->

    <!-- lifted/modified from Apache Spark scalastyle
    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
        </parameters>
    </check>
    -->

    <!-- lifted/modified from Apache Spark scalastyle
    <check customId="extractopt" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters><parameter name="regex">extractOpt</parameter></parameters>
        <customMessage>Use jsonOption(x).map(.extract[T]) instead of .extractOpt[T], as the latter
        is slower.  </customMessage>
    </check>
    -->

    <!-- lifted/modified from Apache Spark scalastyle
    <check level="warning" class="org.scalastyle.scalariform.ImportOrderChecker" enabled="true">
        <parameters>
            <parameter name="groups">java,javax,scala,3rdParty,spark</parameter>
            <parameter name="group.java">java\..*</parameter>
            <parameter name="group.javax">javax?\..*</parameter>
            <parameter name="group.scala">scala\..*</parameter>
            <parameter name="group.3rdParty">(?!org\.apache\.spark\.).*</parameter>
            <parameter name="group.spark">org\.apache\.spark\..*</parameter>
        </parameters>
    </check>
    -->

    <!-- lifted/modified from Apache Spark scalastyle
    <check level="error" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">COMMA</parameter>
        </parameters>
    </check>
    -->

    <!-- SPARK-3854: Single Space between ')' and '{' -->
    <!-- lifted/modified from Apache Spark scalastyle
    <check customId="SingleSpaceBetweenRParenAndLCurlyBrace" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters><parameter name="regex">\)\{</parameter></parameters>
        <customMessage><![CDATA[
        Single Space between ')' and `{`.
        ]]></customMessage>
    </check>
    -->

    <!-- lifted/modified from Apache Spark scalastyle
    <check customId="NoScalaDoc" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters><parameter name="regex">(?m)^(\s*)/[*][*].*$(\r|)\n^\1  [*]</parameter></parameters>
        <customMessage>Use Javadoc style indentation for multiline comments</customMessage>
    </check>
    -->

    <!-- ******************************* ALL GOOD BELOW HERE ******************************* -->

    <!-- SPARK-16877: Avoid Java annotations -->
    <check level="error" class="org.scalastyle.scalariform.OverrideJavaChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.scalariform.XmlLiteralChecker" enabled="true"/>
    <check customId="nonascii" level="error" class="org.scalastyle.scalariform.NonASCIICharacterChecker" enabled="true"></check>

    <!-- ??? usually shouldn't be checked into the code base. -->
    <check level="error" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true"></check>

    <check level="error" class="org.scalastyle.file.FileTabChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.file.FileLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxFileLength"><![CDATA[3500]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLineLength"><![CDATA[360]]></parameter>
            <parameter name="tabSize"><![CDATA[4]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
        <parameters>
            <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
        </parameters>
    </check>
    <check customId="argcount" level="error" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
        <parameters>
            <parameter name="maxParameters"><![CDATA[22]]></parameter>
            <!-- parameter name="maxParameters"><![CDATA[8]]></parameter -->
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <customMessage>Don't import (im)mutable - use explicit package references for all mutables and keep mutable contained within functions where possible</customMessage>
        <parameters>
            <parameter name="regex"><![CDATA[import scala\.collection\.(im)*mutable(\._|$)]]></parameter>
            <parameter name="line">false</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <customMessage>Don't import (im)mutable Map - use explicit package references for all mutables and keep mutable contained within functions where possible</customMessage>
        <parameters>
            <parameter name="regex"><![CDATA[import scala\.collection\.(im)*mutable.(\{.*, )*Map]]></parameter>
            <parameter name="line">false</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <customMessage>Don't import (im)mutable Set - use explicit package references for all mutables and keep mutable contained within functions where possible</customMessage>
        <parameters>
            <parameter name="regex"><![CDATA[import scala\.collection\.(im)*mutable.(\{.*, )*Set]]></parameter>
            <parameter name="line">true</parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <customMessage>Avoid naked println. Use PrintStream.println, System.out.println or System.err.println when println is required</customMessage>
        <parameters>
            <parameter name="regex"><![CDATA[(?<!\.)println]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
        <parameters>
            <parameter name="maxTypes"><![CDATA[30]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLength"><![CDATA[580]]></parameter>
            <!--GOAL parameter name="maxLength"><![CDATA[50]]></parameter -->
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-zA-Z+!-][\\+\\=A-Za-z0-9_]*$]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">
        <parameters>
            <parameter name="maxMethods"><![CDATA[60]]></parameter>
        </parameters>
    </check>

    <!-- ================================================================================ -->
    <!--                               rules we don't want                                -->
    <!-- ================================================================================ -->

    <!-- Warnings that we will never use -->
    <!-- Conflicts with scalafix and other rules -->
    <check level="warning" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false"></check>

    <!-- This is not an apache project -->
    <check level="warning" class="org.scalastyle.file.HeaderMatchesChecker" enabled="false">
        <parameters>
            <parameter name="header"><![CDATA[// Copyright (C) 2011-2012 the original author or authors.
            // See the LICENCE.txt file distributed with this work for additional
            // information regarding copyright ownership.
            //
            // Licensed under the Apache License, Version 2.0 (the "License");
            // you may not use this file except in compliance with the License.
            // You may obtain a copy of the License at
            //
            // http://www.apache.org/licenses/LICENSE-2.0
            //
            // Unless required by applicable law or agreed to in writing, software
            // distributed under the License is distributed on an "AS IS" BASIS,
            // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            // See the License for the specific language governing permissions and
            // limitations under the License.]]></parameter>
        </parameters>
    </check>

</scalastyle>

